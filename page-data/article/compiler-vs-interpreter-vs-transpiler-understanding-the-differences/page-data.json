{"componentChunkName":"component---src-templates-post-js","path":"/article/compiler-vs-interpreter-vs-transpiler-understanding-the-differences/","result":{"data":{"ghostPost":{"id":"Ghost__Post__63b3ea90bb0c2e69d86452f9","title":"Compiler vs Interpreter vs Transpiler: Understanding the differences","slug":"compiler-vs-interpreter-vs-transpiler-understanding-the-differences","featured":false,"feature_image":"https://images.unsplash.com/photo-1515879218367-8466d910aaa4?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxMTc3M3wwfDF8c2VhcmNofDh8fGphdmElMjBjb2RlfGVufDB8fHx8MTY3MjczNTQyMQ&ixlib=rb-4.0.3&q=80&w=2000","excerpt":"One key difference between transpiling and compiling is that transpiling involves a conversion between languages that have similar level of abstraction, while compiling may have very different levels of abstraction. An interpreter is a program that executes code written in a programming language.","custom_excerpt":"One key difference between transpiling and compiling is that transpiling involves a conversion between languages that have similar level of abstraction, while compiling may have very different levels of abstraction. An interpreter is a program that executes code written in a programming language.","visibility":"public","created_at_pretty":"03 January, 2023","published_at_pretty":"08 February, 2022","updated_at_pretty":"03 January, 2023","created_at":"2023-01-03T08:42:56.000+00:00","published_at":"2022-02-08T09:49:00.000+00:00","updated_at":"2023-01-03T10:00:00.000+00:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"M. Mursaleen","slug":"m","bio":null,"profile_image":null,"twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"M. Mursaleen","slug":"m","bio":null,"profile_image":null,"twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Programming Language","slug":"programming-language","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Programming Language","slug":"programming-language","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Computer Architecture","slug":"computer-architecture","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Compiler\n\nA compiler is a program that translates code written in one programming language (the source language) into another programming language (the target language). The process of compilation typically involves analyzing the source code, generating intermediate representations of the code, and then generating the target code based on those intermediate representations. The intermediate representations are often designed to be easier to optimize and transform, which can make the generated code more efficient.\n\nA source-to-source compiler translates between programming languages that operate at approximately the same level of abstraction, while a traditional compiler translates from a higher level programming language to a lower level programming language.\n\nSource-to-source compiler - WikipediaWikimedia Foundation, Inc.Contributors to Wikimedia projects\n\nTypes of Compiler\n\n * Native Code Compiler: The compiler used to compile a source code for same type of platform only. The output generated by this type of compiler can only be run on the same type of computer system and operating system(OS) that the compiler itself runs on.\n * Cross Compiler: The compiler used to compile a source code for different kinds platform. Used in making softwareâ€™s for embedded systems that can be used on multiple platforms.\n * Source to Source Compiler: Converts HLL(High Level Language) or Source Language to LLL(Low Level Language) or Machine Language.\n * Transpiler: Converts HLL (High Level Language) to another HLL.\n\n\nTranspiler\n\nA transpiler, also known as a source-to-source compiler, is a program that translates code written in one programming language into another programming language that is syntactically similar. The process of transpilation is similar to compilation, but the generated code is intended to be readable and maintainable by humans, rather than being optimized for execution by a computer. Transpilers are often used to migrate code from one version of a language to another, or to convert code written in a high-level language into a lower-level language for better performance.\n\nWhereas, Translator converts the source code from one programming language to another programming language of the same or different level of abstraction. Note that result can be a machine code, if source code was also a machine code.\n\nSimply put: \"A transpiler is a source to source program transformation system\".\n\nCompiling vs TranspilingSteve FentonSteve Fenton\n\nTranspiling is a specific term for taking source code written in one language and transforming into another language that has a similar level of abstraction.\n\nFor example: \"Compile\" JSX => JavaScript (and HTML), which matches the definition above, therefore, it can be called 'transpiling'. Though calling it 'compiling' would also be ok.\n\nAnother example: CoffeeScript / TypeScript / whatEverScript => JavaScript and vice versa.\n\n\nDifference between Transpiling and Compiling\n\nOne key difference between transpiling and compiling is that transpiling typically involves a conversion between languages that have a similar level of abstraction, while compiling involves a conversion between languages that may have very different levels of abstraction. For example, a transpiler might convert code written in the latest version of a programming language into an older version of the same language, while a compiler might convert code written in a high-level language like Python into machine code that can be executed directly by a computer's processor.\n\n\nInterpreter\n\nAn interpreter is a program that executes code written in a programming language. It reads the source code one line at a time and executes it immediately, rather than generating a separate executable file. This means that code written in an interpreted language can be run on any machine that has an interpreter for that language, without the need to compile the code first.\n\nThere are several different types of interpreters that are used in computer science and programming:\n\n 1. Command line interpreters: These are programs that interpret and execute commands that are typed into a command line interface. Some examples of command line interpreters include the Bash shell on Unix-like systems and the Command Prompt on Windows systems.\n 2. Scripting language interpreters: These are programs that interpret and execute scripts written in a scripting language. Scripting languages are often used for automating tasks and for writing simple programs that do not require the full power and complexity of a general-purpose programming language. Some examples of scripting languages include Python, Perl, and Ruby.\n 3. Virtual machine interpreters: These are programs that interpret and execute code written for a virtual machine. Virtual machines are abstract computing environments that are implemented in software, and they can be used to execute code written in a variety of different programming languages. Some examples of virtual machines include the Java Virtual Machine (JVM) and the .NET Common Language Runtime (CLR).\n 4. Natural language interpreters: These are programs that interpret and execute commands written in natural language, such as English or Spanish. Natural language interpreters are often used in voice assistants and other applications that allow users to interact with a computer using spoken language.\n\nWhat are compilers, interpreters and transpilers? What is the difference among them, and how do they work?Answer (1 of 4): Compilers convert the source code written in a high level language to machine executable instructions. (.exe, .out) Interpreters directly perform instructions without compiling (i.e. instruction by instruction as opposed to entire program) by changing to some intermediate form (...Quora","html":"<h2 id=\"compiler\">Compiler</h2><p>A compiler is a program that translates code written in one programming language (the source language) into another programming language (the target language). The process of compilation typically involves analyzing the source code, generating intermediate representations of the code, and then generating the target code based on those intermediate representations. The intermediate representations are often designed to be easier to optimize and transform, which can make the generated code more efficient.</p><blockquote>A source-to-source compiler translates between programming languages that operate at approximately the same level of abstraction, while a traditional compiler translates from a higher level programming language to a lower level programming language.</blockquote><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://en.wikipedia.org/wiki/Source-to-source_compiler\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Source-to-source compiler - Wikipedia</div><div class=\"kg-bookmark-description\"></div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://en.wikipedia.org/static/apple-touch/wikipedia.png\" alt=\"\"><span class=\"kg-bookmark-author\">Wikimedia Foundation, Inc.</span><span class=\"kg-bookmark-publisher\">Contributors to Wikimedia projects</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://upload.wikimedia.org/wikipedia/en/thumb/1/1d/Information_icon4.svg/20px-Information_icon4.svg.png\" alt=\"\"></div></a></figure><p><strong><strong>Types of Compiler</strong></strong></p><ul><li><strong><strong>Native Code Compiler</strong></strong>: The compiler used to compile a source code for same type of platform only. The output generated by this type of compiler can only be run on the same type of computer system and operating system(OS) that the compiler itself runs on.</li><li><strong><strong>Cross Compiler</strong></strong>: The compiler used to compile a source code for different kinds platform. Used in making softwareâ€™s for embedded systems that can be used on multiple platforms.</li><li><strong><strong>Source to Source Compiler</strong></strong>: Converts <strong><strong>HLL</strong></strong>(High Level Language) or Source Language to <strong><strong>LLL</strong></strong>(Low Level Language) or Machine Language.</li><li><strong><strong>Transpiler</strong></strong>: Converts <strong><strong>HLL</strong></strong> (High Level Language) to another HLL.</li></ul><h2 id=\"transpiler\">Transpiler</h2><p>A transpiler, also known as a source-to-source compiler, is a program that translates code written in one programming language into another programming language that is syntactically similar. The process of transpilation is similar to compilation, but the generated code is intended to be readable and maintainable by humans, rather than being optimized for execution by a computer. Transpilers are often used to migrate code from one version of a language to another, or to convert code written in a high-level language into a lower-level language for better performance.</p><p>Whereas,<strong> <strong>Translator</strong></strong> converts the source code from one programming language to another programming language of the <strong><strong>same or different</strong></strong> level of abstraction. Note that result can be a machine code, if source code was also a machine code.</p><p>Simply put: \"A transpiler is a source to source program transformation system\".</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://www.stevefenton.co.uk/blog/2012/11/compiling-vs-transpiling/\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Compiling vs Transpiling</div><div class=\"kg-bookmark-description\"></div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://www.stevefenton.co.uk/icons/apple-touch-icon.png\" alt=\"\"><span class=\"kg-bookmark-author\">Steve Fenton</span><span class=\"kg-bookmark-publisher\">Steve Fenton</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://www.stevefenton.co.uk/img/surface-accessories.png\" alt=\"\"></div></a></figure><blockquote><strong><strong>Transpiling</strong></strong> is a specific term for taking source code written in one language and transforming into another language that has a <strong><strong>similar level of abstraction</strong></strong>.</blockquote><p>For example: \"Compile\" <strong><strong>JSX =&gt; JavaScript</strong></strong> (and HTML), which matches the definition above, therefore, it can be called 'transpiling'. Though calling it 'compiling' would also be ok.</p><p>Another example: <strong><strong>CoffeeScript / TypeScript / whatEverScript =&gt; JavaScript</strong></strong> and vice versa.</p><h2 id=\"difference-between-transpiling-and-compiling\">Difference between Transpiling and Compiling</h2><p>One key difference between transpiling and compiling is that transpiling typically involves a conversion between languages that have a similar level of abstraction, while compiling involves a conversion between languages that may have very different levels of abstraction. For example, a transpiler might convert code written in the latest version of a programming language into an older version of the same language, while a compiler might convert code written in a high-level language like Python into machine code that can be executed directly by a computer's processor.</p><h2 id=\"interpreter\">Interpreter</h2><p>An interpreter is a program that executes code written in a programming language. It reads the source code one line at a time and executes it immediately, rather than generating a separate executable file. This means that code written in an interpreted language can be run on any machine that has an interpreter for that language, without the need to compile the code first.</p><p>There are several different types of interpreters that are used in computer science and programming:</p><ol><li>Command line interpreters: These are programs that interpret and execute commands that are typed into a command line interface. Some examples of command line interpreters include the Bash shell on Unix-like systems and the Command Prompt on Windows systems.</li><li>Scripting language interpreters: These are programs that interpret and execute scripts written in a scripting language. Scripting languages are often used for automating tasks and for writing simple programs that do not require the full power and complexity of a general-purpose programming language. Some examples of scripting languages include Python, Perl, and Ruby.</li><li>Virtual machine interpreters: These are programs that interpret and execute code written for a virtual machine. Virtual machines are abstract computing environments that are implemented in software, and they can be used to execute code written in a variety of different programming languages. Some examples of virtual machines include the Java Virtual Machine (JVM) and the .NET Common Language Runtime (CLR).</li><li>Natural language interpreters: These are programs that interpret and execute commands written in natural language, such as English or Spanish. Natural language interpreters are often used in voice assistants and other applications that allow users to interact with a computer using spoken language.</li></ol><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://www.quora.com/What-are-compilers-interpreters-and-transpilers-What-is-the-difference-among-them-and-how-do-they-work\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">What are compilers, interpreters and transpilers? What is the difference among them, and how do they work?</div><div class=\"kg-bookmark-description\">Answer (1 of 4): Compilers convert the source code written in a high level language to machine executable instructions. (.exe, .out) Interpreters directly perform instructions without compiling (i.e. instruction by instruction as opposed to entire program) by changing to some intermediate form (...</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://qsf.cf2.quoracdn.net/-4-images.favicon-new.ico-26-07ecf7cd341b6919.ico\" alt=\"\"><span class=\"kg-bookmark-author\">Quora</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://qph.cf2.quoracdn.net/main-custom-t-788-600x315-pitawsfglqjondnjfdmgqqsnbnracpcv.jpeg\" alt=\"\"></div></a></figure>","url":"https://portfolioghost.phonemall.pk/compiler-vs-interpreter-vs-transpiler-understanding-the-differences/","canonical_url":null,"uuid":"7c3dae26-da88-4227-a10c-a536bcf395f6","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"63b3ea90bb0c2e69d86452f9","reading_time":4}},"pageContext":{"slug":"compiler-vs-interpreter-vs-transpiler-understanding-the-differences"}},"staticQueryHashes":["1752937443","2358152166","2561578252","2731221146","4145280475"]}