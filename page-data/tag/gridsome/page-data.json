{"componentChunkName":"component---src-templates-tag-js","path":"/tag/gridsome/","result":{"data":{"ghostTag":{"slug":"gridsome","name":"Gridsome","visibility":"public","feature_image":null,"description":null,"meta_title":null,"meta_description":null},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__63aec536bb0c2e69d86451ce","title":"An Introduction to GraphQL: The Flexible and Efficient Query Language","slug":"an-introduction-to-graphql-the-flexible-and-efficient-query-language","featured":false,"feature_image":"https://portfolioghost.phonemall.pk/content/images/2022/12/platform--1-.jpg","excerpt":"GraphQL is a query language that was created by Facebook as an alternative to REST APIs. It is designed to provide a more flexible and efficient way for clients to request data from servers.","custom_excerpt":"GraphQL is a query language that was created by Facebook as an alternative to REST APIs. It is designed to provide a more flexible and efficient way for clients to request data from servers.","visibility":"public","created_at_pretty":"30 December, 2022","published_at_pretty":"20 July, 2022","updated_at_pretty":"31 December, 2022","created_at":"2022-12-30T11:02:14.000+00:00","published_at":"2022-07-20T08:54:00.000+00:00","updated_at":"2022-12-31T09:08:38.000+00:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"M. Mursaleen","slug":"m","bio":null,"profile_image":null,"twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"M. Mursaleen","slug":"m","bio":null,"profile_image":null,"twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Frontend Development","slug":"frontend-development","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Frontend Development","slug":"frontend-development","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Gatsby","slug":"gatsby","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Gridsome","slug":"gridsome","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"JAMstack","slug":"jamstack","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"React","slug":"react","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Vue","slug":"vue","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Database","slug":"database","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"GraphQL","slug":"graphql","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"API","slug":"api","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"REST","slug":"rest","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"GraphQL graphql.org is a query language that was created by Facebook as an alternative to REST APIs. It is designed to provide a more flexible and efficient way for clients to request data from servers.\n\nWhy developers like GraphQLSee what developers are saying about how they use GraphQL. Check out popular companies that use GraphQL and some tools that integrate with GraphQL.StackShare\n\n\nBenefits of GraphQL\n\nOne of the key benefits of GraphQL is that it allows clients to request exactly the data they need, rather than having to deal with fixed endpoints and data structures. This means that the client can specify exactly what data it needs, and the server can respond with only that data, rather than sending a fixed set of data that may include more than the client needs.\n\nAnother key benefit of GraphQL is that it can be used to query multiple data sources at the same time. This allows clients to retrieve data from multiple sources in a single request, rather than having to make multiple requests to different endpoints.\n\nTo use GraphQL, clients send a query to the server, which specifies the data they want to retrieve. The server then responds with the requested data in a JSON object. The GraphQL query language includes a number of different types of operations, including queries, mutations, and subscriptions, which allow clients to retrieve, modify, and subscribe to data.\n\nGraphQLGraphQL has 27 repositories available. Follow their code on GitHub.GitHub\n\n\nThe philosophy behind GraphQL\n\nThe philosophy behind GraphQL is to provide a more flexible and efficient way for clients to request data from servers. This is achieved by allowing clients to specify exactly the data they need, and allowing the server to respond with only that data.\n\nIn traditional REST APIs, the client is often limited to requesting data from fixed endpoints, each of which returns a fixed set of data. This can be inefficient, as the client may not need all of the data that is returned, and may need to make multiple requests to different endpoints to retrieve the data it needs.\n\nBy contrast, in GraphQL the client can specify exactly the data it needs in a single request, and the server responds with only that data. This allows the client to be more efficient, as it only receives the data it needs, and reduces the amount of network traffic between the client and server.\n\n\nWhy GraphQL is the Future of API Development\n\nGraphQL has become increasingly popular in recent years as an alternative to REST APIs. One of the main reasons for this is that it allows clients to be more flexible and efficient in their data requests, as they can specify exactly the data they need and receive only that data in the response. This can be particularly useful in situations where the client needs to request data from multiple sources, as it can do so in a single request using GraphQL.\n\nAnother reason for the adoption of GraphQL is that it allows the API to evolve over time without breaking existing clients. In traditional REST APIs, new versions of the API often require the creation of new endpoints, which can be confusing for developers. With GraphQL, the API schema can be evolved over time, allowing the API to change without breaking existing clients.\n\nGraphQL has been adopted by a number of large companies, including Facebook, GitHub, and Airbnb, and is supported by a number of popular frameworks, such as Apollo and Relay. The adoption of GraphQL has been driven by its flexibility, efficiency, and ability to evolve over time, and it is likely to continue to grow in popularity in the coming years.\n\n\nREST — Representational state transfer API\n\nREST (Representational State Transfer) is a software architectural style that defines a set of constraints for creating web APIs (Application Programming Interfaces). The main principles of REST are based on the way the World Wide Web works, and include the use of HTTP methods (such as GET, POST, PUT, DELETE) and the use of a uniform interface to access resources.\n\nIn a REST API, data is typically retrieved from the server using HTTP GET requests, and modified or deleted using HTTP POST, PUT, and DELETE requests. The server responds to these requests with a status code and, in the case of a successful request, a payload of data in the form of a JSON or XML document.\n\nOne of the key benefits of REST APIs is that they are widely used and well-understood, making them easy to work with for many developers. However, they can be less flexible and efficient than other types of APIs, such as GraphQL, as they have fixed endpoints and return fixed sets of data.\n\n\nGraphQL vs REST API\n\nThere are several key differences between GraphQL and REST (Representational State Transfer) APIs:\n\n 1. Data fetching: In REST, the client can only request data from a fixed set of endpoints, each of which returns a fixed set of data. In contrast, GraphQL allows the client to specify exactly which data it needs, and the server responds with only that data.\n 2. Multiple data sources: With GraphQL, a client can request data from multiple sources in a single request, whereas in REST the client would need to make multiple requests to different endpoints.\n 3. Versioning: In REST, new versions of the API often require the creation of new endpoints, which can be confusing for developers. With GraphQL, the API schema can be evolved over time, allowing the API to evolve without breaking existing clients.\n 4. Caching: REST APIs can be cached at the HTTP level, which can improve performance. However, GraphQL allows the client to specify exactly what data it needs, making it easier to cache the results of queries.\n\nGraphQL offers a more flexible and efficient way to request data from an API, but it may require more setup and maintenance on the server-side compared to a REST API.\n\nHere is a high-level comparison and there are many other factors to consider when choosing between GraphQL and REST APIs.\n\nGraphQLRESTData fetchingClient specifies data neededFixed data from fixed endpointMultiple data sourcesSingle request to multiple sourcesMultiple requests to different endpointsVersioningEvolvable schemaFixed endpointsCachingClient-specified dataHTTP level caching\n\nFor fast and secure sites | JamstackWhat is the Jamstack? Why use the Jamstack? How do I get started? Learn what the Jamstack is all about and why it’s the best approach for building faster, more secure websites.Jamstack.org\n\n\nConclusion tl;dr:\n\nGraphQL is a query language that allows clients to request specific data from servers, and can be used to query multiple data sources in a single request. It offers a more flexible and efficient way to request data compared to REST APIs, which have fixed endpoints and return fixed sets of data. However, GraphQL may require more setup and maintenance on the server-side compared to a REST API.","html":"<p>GraphQL <a href=\"https://graphql.org/\">graphql.org</a> is a query language that was created by Facebook as an alternative to REST APIs. It is designed to provide a more flexible and efficient way for clients to request data from servers.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://stackshare.io/graphql\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Why developers like GraphQL</div><div class=\"kg-bookmark-description\">See what developers are saying about how they use GraphQL. Check out popular companies that use GraphQL and some tools that integrate with GraphQL.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://stackshare.io/favicon.ico\" alt=\"\"><span class=\"kg-bookmark-author\">StackShare</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://img.stackshare.io/service/3820/12972006.png\" alt=\"\"></div></a></figure><h2 id=\"benefits-of-graphql\">Benefits of GraphQL</h2><p>One of the key benefits of GraphQL is that it allows clients to request exactly the data they need, rather than having to deal with fixed endpoints and data structures. This means that the client can specify exactly what data it needs, and the server can respond with only that data, rather than sending a fixed set of data that may include more than the client needs.</p><p>Another key benefit of GraphQL is that it can be used to query multiple data sources at the same time. This allows clients to retrieve data from multiple sources in a single request, rather than having to make multiple requests to different endpoints.</p><p>To use GraphQL, clients send a query to the server, which specifies the data they want to retrieve. The server then responds with the requested data in a JSON object. The GraphQL query language includes a number of different types of operations, including queries, mutations, and subscriptions, which allow clients to retrieve, modify, and subscribe to data.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://github.com/graphql\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">GraphQL</div><div class=\"kg-bookmark-description\">GraphQL has 27 repositories available. Follow their code on GitHub.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://github.com/fluidicon.png\" alt=\"\"><span class=\"kg-bookmark-author\">GitHub</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://avatars.githubusercontent.com/u/12972006?s&#x3D;280&amp;v&#x3D;4\" alt=\"\"></div></a></figure><h2 id=\"the-philosophy-behind-graphql\">The philosophy behind GraphQL</h2><p>The philosophy behind GraphQL is to provide a more flexible and efficient way for clients to request data from servers. This is achieved by allowing clients to specify exactly the data they need, and allowing the server to respond with only that data.</p><p>In traditional REST APIs, the client is often limited to requesting data from fixed endpoints, each of which returns a fixed set of data. This can be inefficient, as the client may not need all of the data that is returned, and may need to make multiple requests to different endpoints to retrieve the data it needs.</p><p>By contrast, in GraphQL the client can specify exactly the data it needs in a single request, and the server responds with only that data. This allows the client to be more efficient, as it only receives the data it needs, and reduces the amount of network traffic between the client and server.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://portfolioghost.phonemall.pk/content/images/2022/12/What-is-GraphQL.jpg\" class=\"kg-image\" alt loading=\"lazy\" width=\"1280\" height=\"720\" srcset=\"https://portfolioghost.phonemall.pk/content/images/size/w600/2022/12/What-is-GraphQL.jpg 600w, https://portfolioghost.phonemall.pk/content/images/size/w1000/2022/12/What-is-GraphQL.jpg 1000w, https://portfolioghost.phonemall.pk/content/images/2022/12/What-is-GraphQL.jpg 1280w\" sizes=\"(min-width: 720px) 720px\"></figure><h2 id=\"why-graphql-is-the-future-of-api-development\">Why GraphQL is the Future of API Development</h2><p>GraphQL has become increasingly popular in recent years as an alternative to REST APIs. One of the main reasons for this is that it allows clients to be more flexible and efficient in their data requests, as they can specify exactly the data they need and receive only that data in the response. This can be particularly useful in situations where the client needs to request data from multiple sources, as it can do so in a single request using GraphQL.</p><p>Another reason for the adoption of GraphQL is that it allows the API to evolve over time without breaking existing clients. In traditional REST APIs, new versions of the API often require the creation of new endpoints, which can be confusing for developers. With GraphQL, the API schema can be evolved over time, allowing the API to change without breaking existing clients.</p><p>GraphQL has been adopted by a number of large companies, including Facebook, GitHub, and Airbnb, and is supported by a number of popular frameworks, such as Apollo and Relay. The adoption of GraphQL has been driven by its flexibility, efficiency, and ability to evolve over time, and it is likely to continue to grow in popularity in the coming years.</p><h2 id=\"rest-%E2%80%94-representational-state-transfer-api\">REST — Representational state transfer API</h2><p>REST (Representational State Transfer) is a software architectural style that defines a set of constraints for creating web APIs (Application Programming Interfaces). The main principles of REST are based on the way the World Wide Web works, and include the use of HTTP methods (such as GET, POST, PUT, DELETE) and the use of a uniform interface to access resources.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://portfolioghost.phonemall.pk/content/images/2022/12/file--1-.jpg\" class=\"kg-image\" alt loading=\"lazy\" width=\"960\" height=\"540\" srcset=\"https://portfolioghost.phonemall.pk/content/images/size/w600/2022/12/file--1-.jpg 600w, https://portfolioghost.phonemall.pk/content/images/2022/12/file--1-.jpg 960w\" sizes=\"(min-width: 720px) 720px\"></figure><p>In a REST API, data is typically retrieved from the server using HTTP GET requests, and modified or deleted using HTTP POST, PUT, and DELETE requests. The server responds to these requests with a status code and, in the case of a successful request, a payload of data in the form of a JSON or XML document.</p><p>One of the key benefits of REST APIs is that they are widely used and well-understood, making them easy to work with for many developers. However, they can be less flexible and efficient than other types of APIs, such as GraphQL, as they have fixed endpoints and return fixed sets of data.</p><h2 id=\"graphql-vs-rest-api\">GraphQL vs REST API</h2><p>There are several key differences between GraphQL and REST (Representational State Transfer) APIs:</p><ol><li>Data fetching: In REST, the client can only request data from a fixed set of endpoints, each of which returns a fixed set of data. In contrast, GraphQL allows the client to specify exactly which data it needs, and the server responds with only that data.</li><li>Multiple data sources: With GraphQL, a client can request data from multiple sources in a single request, whereas in REST the client would need to make multiple requests to different endpoints.</li><li>Versioning: In REST, new versions of the API often require the creation of new endpoints, which can be confusing for developers. With GraphQL, the API schema can be evolved over time, allowing the API to evolve without breaking existing clients.</li><li>Caching: REST APIs can be cached at the HTTP level, which can improve performance. However, GraphQL allows the client to specify exactly what data it needs, making it easier to cache the results of queries.</li></ol><figure class=\"kg-card kg-image-card\"><img src=\"https://portfolioghost.phonemall.pk/content/images/2022/12/GraphQL_Image3--1-.jpg\" class=\"kg-image\" alt loading=\"lazy\" width=\"1600\" height=\"900\" srcset=\"https://portfolioghost.phonemall.pk/content/images/size/w600/2022/12/GraphQL_Image3--1-.jpg 600w, https://portfolioghost.phonemall.pk/content/images/size/w1000/2022/12/GraphQL_Image3--1-.jpg 1000w, https://portfolioghost.phonemall.pk/content/images/2022/12/GraphQL_Image3--1-.jpg 1600w\" sizes=\"(min-width: 720px) 720px\"></figure><p>GraphQL offers a more flexible and efficient way to request data from an API, but it may require more setup and maintenance on the server-side compared to a REST API.</p><p>Here is a high-level comparison and there are many other factors to consider when choosing between GraphQL and REST APIs.</p><!--kg-card-begin: html--><table style=\"border-width: 0px; border-style: solid; border-color: inherit; border-image: initial; box-sizing: border-box; --tw-border-spacing-x:0px; --tw-border-spacing-y:0px; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgba(59,130,246,0.5); --tw-ring-offset-shadow:0 0 transparent; --tw-ring-shadow:0 0 transparent; --tw-shadow:0 0 transparent; --tw-shadow-colored:0 0 transparent; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; border-collapse: separate; text-indent: 0px; font-size: 0.875em; line-height: 1.71429; margin-bottom: 2em; margin-top: 2em; table-layout: auto; text-align: left; width: 653px; border-spacing: var(--tw-border-spacing-x) var(--tw-border-spacing-y); color: rgb(209, 213, 219); font-family: Söhne, ui-sans-serif, system-ui, -apple-system, &quot;Segoe UI&quot;, Roboto, Ubuntu, Cantarell, &quot;Noto Sans&quot;, sans-serif, &quot;Helvetica Neue&quot;, Arial, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Noto Color Emoji&quot;; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(68, 70, 84); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;\"><thead style=\"border-width: 0px 0px 1px; border-style: solid; border-top-color: rgb(217, 217, 227); border-right-color: rgb(217, 217, 227); border-bottom-color: var(--tw-prose-th-borders); border-left-color: rgb(217, 217, 227); border-image: initial; box-sizing: border-box; --tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgba(59,130,246,0.5); --tw-ring-offset-shadow:0 0 transparent; --tw-ring-shadow:0 0 transparent; --tw-shadow:0 0 transparent; --tw-shadow-colored:0 0 transparent; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ;\"><tr style=\"border: 0px solid rgb(217, 217, 227); box-sizing: border-box; --tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgba(59,130,246,0.5); --tw-ring-offset-shadow:0 0 transparent; --tw-ring-shadow:0 0 transparent; --tw-shadow:0 0 transparent; --tw-shadow-colored:0 0 transparent; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ;\"><th style=\"border-width: 1px 0px 1px 1px; border-style: solid; border-color: rgb(217, 217, 227); border-image: initial; box-sizing: border-box; --tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgba(59,130,246,0.5); --tw-ring-offset-shadow:0 0 transparent; --tw-ring-shadow:0 0 transparent; --tw-shadow:0 0 transparent; --tw-shadow-colored:0 0 transparent; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; color: var(--tw-prose-headings); font-weight: 600; padding: 0.25rem 0.75rem; vertical-align: bottom; background-color: rgba(236, 236, 241, 0.2); border-top-left-radius: 0.375rem;\"></th><th style=\"border-width: 1px 0px 1px 1px; border-style: solid; border-color: rgb(217, 217, 227); border-image: initial; box-sizing: border-box; --tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgba(59,130,246,0.5); --tw-ring-offset-shadow:0 0 transparent; --tw-ring-shadow:0 0 transparent; --tw-shadow:0 0 transparent; --tw-shadow-colored:0 0 transparent; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; color: var(--tw-prose-headings); font-weight: 600; padding: 0.25rem 0.75rem; vertical-align: bottom; background-color: rgba(236, 236, 241, 0.2);\">GraphQL</th><th style=\"border: 1px solid rgb(217, 217, 227); box-sizing: border-box; --tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgba(59,130,246,0.5); --tw-ring-offset-shadow:0 0 transparent; --tw-ring-shadow:0 0 transparent; --tw-shadow:0 0 transparent; --tw-shadow-colored:0 0 transparent; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; color: var(--tw-prose-headings); font-weight: 600; padding: 0.25rem 0.75rem; vertical-align: bottom; background-color: rgba(236, 236, 241, 0.2); border-top-right-radius: 0.375rem;\">REST</th></tr></thead><tbody style=\"border: 0px solid rgb(217, 217, 227); box-sizing: border-box; --tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgba(59,130,246,0.5); --tw-ring-offset-shadow:0 0 transparent; --tw-ring-shadow:0 0 transparent; --tw-shadow:0 0 transparent; --tw-shadow-colored:0 0 transparent; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ;\"><tr style=\"border-width: 0px 0px 1px; border-style: solid; border-top-color: rgb(217, 217, 227); border-right-color: rgb(217, 217, 227); border-bottom-color: var(--tw-prose-td-borders); border-left-color: rgb(217, 217, 227); border-image: initial; box-sizing: border-box; --tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgba(59,130,246,0.5); --tw-ring-offset-shadow:0 0 transparent; --tw-ring-shadow:0 0 transparent; --tw-shadow:0 0 transparent; --tw-shadow-colored:0 0 transparent; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ;\"><td style=\"border-width: 0px 0px 1px 1px; border-style: solid; border-color: rgb(217, 217, 227); border-image: initial; box-sizing: border-box; --tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgba(59,130,246,0.5); --tw-ring-offset-shadow:0 0 transparent; --tw-ring-shadow:0 0 transparent; --tw-shadow:0 0 transparent; --tw-shadow-colored:0 0 transparent; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; vertical-align: baseline; padding: 0.25rem 0.75rem;\">Data fetching</td><td style=\"border-width: 0px 0px 1px 1px; border-style: solid; border-color: rgb(217, 217, 227); border-image: initial; box-sizing: border-box; --tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgba(59,130,246,0.5); --tw-ring-offset-shadow:0 0 transparent; --tw-ring-shadow:0 0 transparent; --tw-shadow:0 0 transparent; --tw-shadow-colored:0 0 transparent; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; vertical-align: baseline; padding: 0.25rem 0.75rem;\">Client specifies data needed</td><td style=\"border-width: 0px 1px 1px; border-style: solid; border-color: rgb(217, 217, 227); border-image: initial; box-sizing: border-box; --tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgba(59,130,246,0.5); --tw-ring-offset-shadow:0 0 transparent; --tw-ring-shadow:0 0 transparent; --tw-shadow:0 0 transparent; --tw-shadow-colored:0 0 transparent; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; vertical-align: baseline; padding: 0.25rem 0.75rem;\">Fixed data from fixed endpoint</td></tr><tr style=\"border-width: 0px 0px 1px; border-style: solid; border-top-color: rgb(217, 217, 227); border-right-color: rgb(217, 217, 227); border-bottom-color: var(--tw-prose-td-borders); border-left-color: rgb(217, 217, 227); border-image: initial; box-sizing: border-box; --tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgba(59,130,246,0.5); --tw-ring-offset-shadow:0 0 transparent; --tw-ring-shadow:0 0 transparent; --tw-shadow:0 0 transparent; --tw-shadow-colored:0 0 transparent; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ;\"><td style=\"border-width: 0px 0px 1px 1px; border-style: solid; border-color: rgb(217, 217, 227); border-image: initial; box-sizing: border-box; --tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgba(59,130,246,0.5); --tw-ring-offset-shadow:0 0 transparent; --tw-ring-shadow:0 0 transparent; --tw-shadow:0 0 transparent; --tw-shadow-colored:0 0 transparent; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; vertical-align: baseline; padding: 0.25rem 0.75rem;\">Multiple data sources</td><td style=\"border-width: 0px 0px 1px 1px; border-style: solid; border-color: rgb(217, 217, 227); border-image: initial; box-sizing: border-box; --tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgba(59,130,246,0.5); --tw-ring-offset-shadow:0 0 transparent; --tw-ring-shadow:0 0 transparent; --tw-shadow:0 0 transparent; --tw-shadow-colored:0 0 transparent; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; vertical-align: baseline; padding: 0.25rem 0.75rem;\">Single request to multiple sources</td><td style=\"border-width: 0px 1px 1px; border-style: solid; border-color: rgb(217, 217, 227); border-image: initial; box-sizing: border-box; --tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgba(59,130,246,0.5); --tw-ring-offset-shadow:0 0 transparent; --tw-ring-shadow:0 0 transparent; --tw-shadow:0 0 transparent; --tw-shadow-colored:0 0 transparent; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; vertical-align: baseline; padding: 0.25rem 0.75rem;\">Multiple requests to different endpoints</td></tr><tr style=\"border-width: 0px 0px 1px; border-style: solid; border-top-color: rgb(217, 217, 227); border-right-color: rgb(217, 217, 227); border-bottom-color: var(--tw-prose-td-borders); border-left-color: rgb(217, 217, 227); border-image: initial; box-sizing: border-box; --tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgba(59,130,246,0.5); --tw-ring-offset-shadow:0 0 transparent; --tw-ring-shadow:0 0 transparent; --tw-shadow:0 0 transparent; --tw-shadow-colored:0 0 transparent; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ;\"><td style=\"border-width: 0px 0px 1px 1px; border-style: solid; border-color: rgb(217, 217, 227); border-image: initial; box-sizing: border-box; --tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgba(59,130,246,0.5); --tw-ring-offset-shadow:0 0 transparent; --tw-ring-shadow:0 0 transparent; --tw-shadow:0 0 transparent; --tw-shadow-colored:0 0 transparent; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; vertical-align: baseline; padding: 0.25rem 0.75rem;\">Versioning</td><td style=\"border-width: 0px 0px 1px 1px; border-style: solid; border-color: rgb(217, 217, 227); border-image: initial; box-sizing: border-box; --tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgba(59,130,246,0.5); --tw-ring-offset-shadow:0 0 transparent; --tw-ring-shadow:0 0 transparent; --tw-shadow:0 0 transparent; --tw-shadow-colored:0 0 transparent; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; vertical-align: baseline; padding: 0.25rem 0.75rem;\">Evolvable schema</td><td style=\"border-width: 0px 1px 1px; border-style: solid; border-color: rgb(217, 217, 227); border-image: initial; box-sizing: border-box; --tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgba(59,130,246,0.5); --tw-ring-offset-shadow:0 0 transparent; --tw-ring-shadow:0 0 transparent; --tw-shadow:0 0 transparent; --tw-shadow-colored:0 0 transparent; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; vertical-align: baseline; padding: 0.25rem 0.75rem;\">Fixed endpoints</td></tr><tr style=\"border-width: 0px; border-style: solid; border-top-color: rgb(217, 217, 227); border-right-color: rgb(217, 217, 227); border-bottom-color: var(--tw-prose-td-borders); border-left-color: rgb(217, 217, 227); border-image: initial; box-sizing: border-box; --tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgba(59,130,246,0.5); --tw-ring-offset-shadow:0 0 transparent; --tw-ring-shadow:0 0 transparent; --tw-shadow:0 0 transparent; --tw-shadow-colored:0 0 transparent; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ;\"><td style=\"border-width: 0px 0px 1px 1px; border-style: solid; border-color: rgb(217, 217, 227); border-image: initial; box-sizing: border-box; --tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgba(59,130,246,0.5); --tw-ring-offset-shadow:0 0 transparent; --tw-ring-shadow:0 0 transparent; --tw-shadow:0 0 transparent; --tw-shadow-colored:0 0 transparent; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; vertical-align: baseline; padding: 0.25rem 0.75rem; border-bottom-left-radius: 0.375rem;\">Caching</td><td style=\"border-width: 0px 0px 1px 1px; border-style: solid; border-color: rgb(217, 217, 227); border-image: initial; box-sizing: border-box; --tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgba(59,130,246,0.5); --tw-ring-offset-shadow:0 0 transparent; --tw-ring-shadow:0 0 transparent; --tw-shadow:0 0 transparent; --tw-shadow-colored:0 0 transparent; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; vertical-align: baseline; padding: 0.25rem 0.75rem;\">Client-specified data</td><td style=\"border-width: 0px 1px 1px; border-style: solid; border-color: rgb(217, 217, 227); border-image: initial; box-sizing: border-box; --tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgba(59,130,246,0.5); --tw-ring-offset-shadow:0 0 transparent; --tw-ring-shadow:0 0 transparent; --tw-shadow:0 0 transparent; --tw-shadow-colored:0 0 transparent; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; vertical-align: baseline; padding: 0.25rem 0.75rem; border-bottom-right-radius: 0.375rem;\">HTTP level caching</td></tr></tbody></table><!--kg-card-end: html--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://portfolioghost.phonemall.pk/content/images/2022/12/graphcms-jamstack-1.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1000\" height=\"563\" srcset=\"https://portfolioghost.phonemall.pk/content/images/size/w600/2022/12/graphcms-jamstack-1.png 600w, https://portfolioghost.phonemall.pk/content/images/2022/12/graphcms-jamstack-1.png 1000w\" sizes=\"(min-width: 720px) 720px\"><figcaption>GraphQL plays an important role in the JAMstack</figcaption></figure><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://jamstack.org/\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">For fast and secure sites | Jamstack</div><div class=\"kg-bookmark-description\">What is the Jamstack? Why use the Jamstack? How do I get started? Learn what the Jamstack is all about and why it’s the best approach for building faster, more secure websites.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://jamstack.org/img/favicons/apple-touch-icon.png\" alt=\"\"><span class=\"kg-bookmark-author\">Jamstack.org</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://www.jamstack.org/img/og/default-og-image.png\" alt=\"\"></div></a></figure><h2 id=\"conclusion-tldr\">Conclusion tl;dr:</h2><p>GraphQL is a query language that allows clients to request specific data from servers, and can be used to query multiple data sources in a single request. It offers a more flexible and efficient way to request data compared to REST APIs, which have fixed endpoints and return fixed sets of data. However, GraphQL may require more setup and maintenance on the server-side compared to a REST API.</p>","url":"https://portfolioghost.phonemall.pk/an-introduction-to-graphql-the-flexible-and-efficient-query-language/","canonical_url":null,"uuid":"0943eb46-3053-4bb8-b1cf-4f40349c9256","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"63aec536bb0c2e69d86451ce","reading_time":6}},{"node":{"id":"Ghost__Post__63aeb5c4bb0c2e69d864512a","title":"Understanding the JAMstack Architecture: A Guide to Building Faster and More SEO Performant Web Applications","slug":"understanding-the-jamstack-architecture-a-guide-to-building-faster-and-more-seo-performant-web-applications","featured":false,"feature_image":"https://portfolioghost.phonemall.pk/content/images/2022/12/1_dzhT92LXV-X99dDRi5vzOg.jpeg","excerpt":"JAMstack is a modern web development architecture that stands for JavaScript, APIs, and Markup. It is a web development approach that focuses on using client-side JavaScript to build web applications and websites, while relying on APIs and pre-built Markup to deliver content and functionality.","custom_excerpt":"JAMstack is a modern web development architecture that stands for JavaScript, APIs, and Markup. It is a web development approach that focuses on using client-side JavaScript to build web applications and websites, while relying on APIs and pre-built Markup to deliver content and functionality.","visibility":"public","created_at_pretty":"30 December, 2022","published_at_pretty":"10 May, 2022","updated_at_pretty":"31 December, 2022","created_at":"2022-12-30T09:56:20.000+00:00","published_at":"2022-05-10T10:57:00.000+00:00","updated_at":"2022-12-31T09:06:13.000+00:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"M. Mursaleen","slug":"m","bio":null,"profile_image":null,"twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"M. Mursaleen","slug":"m","bio":null,"profile_image":null,"twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"JAMstack","slug":"jamstack","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"JAMstack","slug":"jamstack","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"React","slug":"react","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Vue","slug":"vue","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Gatsby","slug":"gatsby","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Gridsome","slug":"gridsome","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"CI/CD","slug":"ci-cd","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Frontend Development","slug":"frontend-development","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Git","slug":"git","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Introduction to the JAMstack: What is it and why is it important?\n\nJAMstack is a modern web development architecture that stands for JavaScript, APIs, and Markup. It is a web development approach that focuses on using client-side JavaScript to build web applications and websites, while relying on APIs and pre-built Markup to deliver content and functionality.\n\nWhy developers like GatsbySee what developers are saying about how they use Gatsby. Check out popular companies that use Gatsby and some tools that integrate with Gatsby.StackShare\n\n\nThe Components of the JAMstack: JavaScript, APIs, and Markup explained\n\nIn a JAMstack architecture, the \"J\" refers to JavaScript, which is used to build the client-side logic of the application or website. The \"A\" refers to APIs, which provide the backend functionality and data for the application or website. The \"M\" refers to Markup, which is the pre-built HTML, CSS, and other static files that are delivered to the client.\n\n\nBenefits of the JAMstack: Faster and more secure web development\n\nOne of the key benefits of the JAMstack approach is that it allows for faster and more secure websites and applications. Since the Markup is pre-built and delivered to the client, the server does not have to dynamically generate it on each request. This means that the server can handle a larger number of requests more efficiently, resulting in faster page load times. Additionally, since the client-side JavaScript is responsible for the majority of the application or website's functionality, there is less code that needs to be run on the server, which makes the application or website more secure.\n\nAnother benefit of the JAMstack approach is that it allows for easier deployment and scaling. Since the Markup is pre-built, it can be easily deployed to a content delivery network (CDN) or other static file hosting service, which allows for faster delivery to users around the world. Additionally, since the server-side logic is handled by APIs, the application or website can be easily scaled by adding more API servers or by using a managed API service like AWS Lambda.\n\n\nImplementing the JAMstack: Tips and best practices\n\nHere are some tips and best practices for implementing the JAMstack architecture:\n\n 1. Use a static site generator: A static site generator is a tool that allows you to build a website or application by writing content in a markup language like Markdown and then generating the HTML, CSS, and other static files that make up the site. Using a static site generator can make it easier to build and maintain a JAMstack application or website.\n 2. Use APIs for dynamic functionality: The JAMstack relies on APIs to provide the backend functionality for your application or website. When implementing the JAMstack, it's important to choose APIs that are reliable and scalable, and to design your API usage in a way that is efficient and easy to maintain.\n 3. Keep your client-side code organized: Since the JAMstack relies on client-side JavaScript for the majority of its functionality, it's important to keep your code organized and easy to understand. This can be achieved through the use of tools like module bundlers and linters, and by following good coding practices like writing clean, maintainable code and using version control.\n 4. Use a content delivery network (CDN): A CDN is a network of servers that are geographically distributed around the world and are used to deliver content to users more efficiently. When implementing the JAMstack, it's important to use a CDN to ensure that your static files are delivered quickly and reliably to users around the world.\n\n\nStatic Site Generator (SSG)\n\nA static site generator is a tool that allows you to build a website or application by writing content in a markup language like Markdown and then generating the HTML, CSS, and other static files that make up the site. Static site generators are often used in the JAMstack architecture because they allow you to build and deploy your application or website as a set of static files that can be served by a content delivery network (CDN) or other static file hosting service.\n\nOne of the main benefits of using a static site generator is that it allows you to build and maintain your application or website in a more efficient and scalable way. Since the HTML, CSS, and other static files are pre-built, they can be easily deployed and served, which means that your application or website can handle a larger number of requests more efficiently. Additionally, since the content is written in a markup language like Markdown, it is easy to edit and maintain, and changes can be made and deployed quickly.\n\nWhy developers like GridsomeSee what developers are saying about how they use Gridsome. Check out popular companies that use Gridsome and some tools that integrate with Gridsome.StackShare\n\nThere are many different static site generators available, each with their own features and capabilities. Some popular static site generators include Jekyll, Gatsby, and Hugo. To choose the right static site generator for your project, it's important to consider factors like the language and framework it is built with, the available plugins and integrations, and the level of customization and control it offers.\n\n\nPopular Static Site Generators\n\n 1. Jekyll: A static site generator written in Ruby that is widely used and well-supported.\n 2. Gatsby: A static site generator built on top of the React JavaScript framework, which allows for building modern and interactive websites.\n 3. Gridsome: Gridsome builds ultra-performance into every page by using the PRPL pattern. You get code splitting, asset optimization, progressive images, and link prefetching out of the box. Gridsome sites get almost perfect page speed scores by default.\n 4. Hugo: A fast and flexible static site generator written in Go.\n 5. Middleman: A static site generator written in Ruby that offers a wide range of features and extensions.\n 6. Eleventy: www.11ty.dev A simple and flexible static site generator written in JavaScript.\n 7. VuePress: A static site generator built on top of the Vue.js JavaScript framework, which is designed for building documentation websites.\n 8. Pelican: A static site generator written in Python that is popular among users of the Python ecosystem.\n 9. Hexo: A fast and flexible static site generator written in JavaScript that is easy to use and customize.\n\nJekyll • Simple, blog-aware, static sitesTransform your plain text into static websites and blogsJekyll • Simple, blog-aware, static sites\n\nThis is just a small selection of the many static site generators available. It's important to choose the one that best fits your needs and the requirements of your project.\n\n\nGraphQL: The Flexible and Efficient Query Language\n\nGraphQL is a query language for your API that was developed and open-sourced by Facebook in 2015. It is designed to provide a more flexible and efficient way for clients to request data from APIs, compared to traditional RESTful APIs.\n\nIn GraphQL, the client specifies exactly the data it needs in a query, and the server returns only that data in the response. This allows the client to request only the data it needs, rather than receiving a fixed set of data from the server as in a REST API. Additionally, GraphQL allows for complex queries that can retrieve data from multiple sources and perform transformations on that data, all in a single request.\n\nGraphQL is often used in the JAMstack architecture as a way to provide backend functionality and data to the frontend of a web application or website. It can be used to fetch data from databases, microservices, and other API sources, and it can be easily integrated into modern web development frameworks like React and Vue.js.\n\nOverall, GraphQL is a powerful and flexible tool for building modern APIs and is widely used by developers around the world.\n\n\nSome JAMSTACK References\n\nNetlify is a platform for building, deploying, and managing modern web applications and websites using the JAMstack architecture. Netlify uses a combination of static site generators, APIs, and a global content delivery network (CDN) to deliver fast and secure websites to users around the world.\n\nDevelop and deploy websites and apps in record time | NetlifyAccelerate the time to deploy your websites and apps. Bring your integrations and APIs together on one powerful serverless platform. Get started for free!Netlify\n\nRender is a cloud computing platform that offers a range of services for building, deploying, and managing web applications and websites. It is designed to make it easy for developers to build and deploy modern applications and websites using a variety of technologies, including the JAMstack architecture.\n\nCloud Application Hosting for Developers | RenderRender is a unified cloud to build and run all your apps and websites with free TLS certificates, global CDN, private networks and auto deploys from Git.Cloud Application Hosting for Developers | Render\n\nSmashing Magazine is a popular website for web developers and designers, and it is built using the JAMstack architecture. The website uses a static site generator to build and deliver the HTML, CSS, and other static files that make up the site, and it relies on APIs to provide the backend functionality and data.\n\nSmashing Magazine — For Web Designers And DevelopersMagazine on CSS, JavaScript, front-end, accessibility, UX and design. For developers, designers and front-end engineers.Smashing MagazineRuslan Yevych\n\n\nConclusion tl;dr:\n\nJAMstack is a modern web development architecture that stands for JavaScript, APIs, and Markup. It is a web development approach that focuses on using client-side JavaScript to build web applications and websites, while relying on APIs and pre-built Markup to deliver content and functionality. The main benefits of the JAMstack are faster and more secure websites and applications, easier deployment and scaling, and a more efficient and scalable development process. To implement the JAMstack, developers can use tools like static site generators, APIs, and content delivery networks (CDNs).","html":"<h2 id=\"introduction-to-the-jamstack-what-is-it-and-why-is-it-important\">Introduction to the JAMstack: What is it and why is it important?</h2><p>JAMstack is a modern web development architecture that stands for JavaScript, APIs, and Markup. It is a web development approach that focuses on using client-side JavaScript to build web applications and websites, while relying on APIs and pre-built Markup to deliver content and functionality.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://stackshare.io/gatsbyjs\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Why developers like Gatsby</div><div class=\"kg-bookmark-description\">See what developers are saying about how they use Gatsby. Check out popular companies that use Gatsby and some tools that integrate with Gatsby.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://stackshare.io/favicon.ico\" alt=\"\"><span class=\"kg-bookmark-author\">StackShare</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://img.stackshare.io/service/5472/default_189db484e0770a6101c6a70f0ef0172bc0f8de37.png\" alt=\"\"></div></a></figure><h2 id=\"the-components-of-the-jamstack-javascript-apis-and-markup-explained\">The Components of the JAMstack: JavaScript, APIs, and Markup explained</h2><p>In a JAMstack architecture, the \"J\" refers to JavaScript, which is used to build the client-side logic of the application or website. The \"A\" refers to APIs, which provide the backend functionality and data for the application or website. The \"M\" refers to Markup, which is the pre-built HTML, CSS, and other static files that are delivered to the client.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://portfolioghost.phonemall.pk/content/images/2022/12/JAMstack-Delivers-v1.jpg\" class=\"kg-image\" alt loading=\"lazy\" width=\"1000\" height=\"550\" srcset=\"https://portfolioghost.phonemall.pk/content/images/size/w600/2022/12/JAMstack-Delivers-v1.jpg 600w, https://portfolioghost.phonemall.pk/content/images/2022/12/JAMstack-Delivers-v1.jpg 1000w\" sizes=\"(min-width: 720px) 720px\"></figure><h2 id=\"benefits-of-the-jamstack-faster-and-more-secure-web-development\">Benefits of the JAMstack: Faster and more secure web development</h2><p>One of the key benefits of the JAMstack approach is that it allows for faster and more secure websites and applications. Since the Markup is pre-built and delivered to the client, the server does not have to dynamically generate it on each request. This means that the server can handle a larger number of requests more efficiently, resulting in faster page load times. Additionally, since the client-side JavaScript is responsible for the majority of the application or website's functionality, there is less code that needs to be run on the server, which makes the application or website more secure.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://portfolioghost.phonemall.pk/content/images/2022/12/decoupled-new-logo.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1000\" height=\"578\" srcset=\"https://portfolioghost.phonemall.pk/content/images/size/w600/2022/12/decoupled-new-logo.png 600w, https://portfolioghost.phonemall.pk/content/images/2022/12/decoupled-new-logo.png 1000w\" sizes=\"(min-width: 720px) 720px\"></figure><p>Another benefit of the JAMstack approach is that it allows for easier deployment and scaling. Since the Markup is pre-built, it can be easily deployed to a content delivery network (CDN) or other static file hosting service, which allows for faster delivery to users around the world. Additionally, since the server-side logic is handled by APIs, the application or website can be easily scaled by adding more API servers or by using a managed API service like AWS Lambda.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://portfolioghost.phonemall.pk/content/images/2022/12/jamstack-1.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1000\" height=\"649\" srcset=\"https://portfolioghost.phonemall.pk/content/images/size/w600/2022/12/jamstack-1.png 600w, https://portfolioghost.phonemall.pk/content/images/2022/12/jamstack-1.png 1000w\" sizes=\"(min-width: 720px) 720px\"></figure><h2 id=\"implementing-the-jamstack-tips-and-best-practices\">Implementing the JAMstack: Tips and best practices</h2><p>Here are some tips and best practices for implementing the JAMstack architecture:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://portfolioghost.phonemall.pk/content/images/2022/12/graphql_jamstack-2.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1000\" height=\"563\" srcset=\"https://portfolioghost.phonemall.pk/content/images/size/w600/2022/12/graphql_jamstack-2.png 600w, https://portfolioghost.phonemall.pk/content/images/2022/12/graphql_jamstack-2.png 1000w\" sizes=\"(min-width: 720px) 720px\"></figure><ol><li>Use a static site generator: A static site generator is a tool that allows you to build a website or application by writing content in a markup language like Markdown and then generating the HTML, CSS, and other static files that make up the site. Using a static site generator can make it easier to build and maintain a JAMstack application or website.</li><li>Use APIs for dynamic functionality: The JAMstack relies on APIs to provide the backend functionality for your application or website. When implementing the JAMstack, it's important to choose APIs that are reliable and scalable, and to design your API usage in a way that is efficient and easy to maintain.</li><li>Keep your client-side code organized: Since the JAMstack relies on client-side JavaScript for the majority of its functionality, it's important to keep your code organized and easy to understand. This can be achieved through the use of tools like module bundlers and linters, and by following good coding practices like writing clean, maintainable code and using version control.</li><li>Use a content delivery network (CDN): A CDN is a network of servers that are geographically distributed around the world and are used to deliver content to users more efficiently. When implementing the JAMstack, it's important to use a CDN to ensure that your static files are delivered quickly and reliably to users around the world.</li></ol><figure class=\"kg-card kg-image-card\"><img src=\"https://portfolioghost.phonemall.pk/content/images/2022/12/1660565252-jamstack-architecture.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1000\" height=\"625\" srcset=\"https://portfolioghost.phonemall.pk/content/images/size/w600/2022/12/1660565252-jamstack-architecture.png 600w, https://portfolioghost.phonemall.pk/content/images/2022/12/1660565252-jamstack-architecture.png 1000w\" sizes=\"(min-width: 720px) 720px\"></figure><h2 id=\"static-site-generator-ssg\">Static Site Generator (SSG)</h2><p>A static site generator is a tool that allows you to build a website or application by writing content in a markup language like Markdown and then generating the HTML, CSS, and other static files that make up the site. Static site generators are often used in the JAMstack architecture because they allow you to build and deploy your application or website as a set of static files that can be served by a content delivery network (CDN) or other static file hosting service.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://portfolioghost.phonemall.pk/content/images/2022/12/website-architecture.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1000\" height=\"808\" srcset=\"https://portfolioghost.phonemall.pk/content/images/size/w600/2022/12/website-architecture.png 600w, https://portfolioghost.phonemall.pk/content/images/2022/12/website-architecture.png 1000w\" sizes=\"(min-width: 720px) 720px\"></figure><p>One of the main benefits of using a static site generator is that it allows you to build and maintain your application or website in a more efficient and scalable way. Since the HTML, CSS, and other static files are pre-built, they can be easily deployed and served, which means that your application or website can handle a larger number of requests more efficiently. Additionally, since the content is written in a markup language like Markdown, it is easy to edit and maintain, and changes can be made and deployed quickly.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://stackshare.io/gridsome\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Why developers like Gridsome</div><div class=\"kg-bookmark-description\">See what developers are saying about how they use Gridsome. Check out popular companies that use Gridsome and some tools that integrate with Gridsome.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://stackshare.io/favicon.ico\" alt=\"\"><span class=\"kg-bookmark-author\">StackShare</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://img.stackshare.io/service/9764/EFXqgANU_400x400.jpg\" alt=\"\"></div></a></figure><p>There are many different static site generators available, each with their own features and capabilities. Some popular static site generators include Jekyll, Gatsby, and Hugo. To choose the right static site generator for your project, it's important to consider factors like the language and framework it is built with, the available plugins and integrations, and the level of customization and control it offers.</p><h3 id=\"popular-static-site-generators\">Popular Static Site Generators</h3><ol><li><a href=\"https://jekyllrb.com/\">Jekyll</a>: A static site generator written in Ruby that is widely used and well-supported.</li><li><a href=\"https://www.gatsbyjs.com/\">Gatsby</a>: A static site generator built on top of the React JavaScript framework, which allows for building modern and interactive websites.</li><li><a href=\"https://gridsome.org/\">Gridsome</a>: Gridsome builds ultra-performance into every page by using the <a href=\"https://gridsome.org/docs/fast-by-default/#the-prpl-pattern\">PRPL pattern</a>. You get <strong>code splitting, asset optimization, progressive images, and link prefetching</strong> out of the box. Gridsome sites get almost perfect page speed scores by default.</li><li><a href=\"https://gohugo.io/\">Hugo</a>: A fast and flexible static site generator written in Go.</li><li><a href=\"https://middlemanapp.com/\">Middleman</a>: A static site generator written in Ruby that offers a wide range of features and extensions.</li><li><a href=\"https://www.11ty.dev/\">Eleventy</a>: <a href=\"https://www.11ty.dev/\">www.11ty.dev</a> A simple and flexible static site generator written in JavaScript.</li><li><a href=\"https://vuepress.vuejs.org/\">VuePress</a>: A static site generator built on top of the Vue.js JavaScript framework, which is designed for building documentation websites.</li><li><a href=\"https://getpelican.com/\">Pelican</a>: A static site generator written in Python that is popular among users of the Python ecosystem.</li><li><a href=\"https://hexo.io/\">Hexo</a>: A fast and flexible static site generator written in JavaScript that is easy to use and customize.</li></ol><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://jekyllrb.com/\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Jekyll • Simple, blog-aware, static sites</div><div class=\"kg-bookmark-description\">Transform your plain text into static websites and blogs</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://jekyllrb.com/favicon.ico\" alt=\"\"><span class=\"kg-bookmark-author\">Jekyll • Simple, blog-aware, static sites</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://jekyllrb.com/img/jekyll-og.png\" alt=\"\"></div></a></figure><p>This is just a small selection of the many static site generators available. It's important to choose the one that best fits your needs and the requirements of your project.</p><h2 id=\"graphql-the-flexible-and-efficient-query-language\">GraphQL: The Flexible and Efficient Query Language</h2><p>GraphQL is a query language for your API that was developed and open-sourced by Facebook in 2015. It is designed to provide a more flexible and efficient way for clients to request data from APIs, compared to traditional RESTful APIs.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://portfolioghost.phonemall.pk/content/images/2022/12/graphcms-jamstack.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1000\" height=\"563\" srcset=\"https://portfolioghost.phonemall.pk/content/images/size/w600/2022/12/graphcms-jamstack.png 600w, https://portfolioghost.phonemall.pk/content/images/2022/12/graphcms-jamstack.png 1000w\" sizes=\"(min-width: 720px) 720px\"></figure><p>In GraphQL, the client specifies exactly the data it needs in a query, and the server returns only that data in the response. This allows the client to request only the data it needs, rather than receiving a fixed set of data from the server as in a REST API. Additionally, GraphQL allows for complex queries that can retrieve data from multiple sources and perform transformations on that data, all in a single request.</p><p>GraphQL is often used in the JAMstack architecture as a way to provide backend functionality and data to the frontend of a web application or website. It can be used to fetch data from databases, microservices, and other API sources, and it can be easily integrated into modern web development frameworks like React and Vue.js.</p><p>Overall, GraphQL is a powerful and flexible tool for building modern APIs and is widely used by developers around the world.</p><h2 id=\"some-jamstack-references\">Some JAMSTACK References</h2><p><a href=\"https://www.netlify.com/\">Netlify</a> is a platform for building, deploying, and managing modern web applications and websites using the JAMstack architecture. Netlify uses a combination of static site generators, APIs, and a global content delivery network (CDN) to deliver fast and secure websites to users around the world.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://www.netlify.com/\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Develop and deploy websites and apps in record time | Netlify</div><div class=\"kg-bookmark-description\">Accelerate the time to deploy your websites and apps. Bring your integrations and APIs together on one powerful serverless platform. Get started for free!</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://www.netlify.com/v3/static/favicon/apple-touch-icon.png\" alt=\"\"><span class=\"kg-bookmark-author\">Netlify</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://www.netlify.com/v3/static/og-image.png\" alt=\"\"></div></a></figure><p><a href=\"https://render.com/\">Render</a> is a cloud computing platform that offers a range of services for building, deploying, and managing web applications and websites. It is designed to make it easy for developers to build and deploy modern applications and websites using a variety of technologies, including the JAMstack architecture.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://render.com/\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Cloud Application Hosting for Developers | Render</div><div class=\"kg-bookmark-description\">Render is a unified cloud to build and run all your apps and websites with free TLS certificates, global CDN, private networks and auto deploys from Git.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://render.com/icons/icon-512x512.png?v&#x3D;4ab9a3fc5e06e2253bb579a9609a1ecc\" alt=\"\"><span class=\"kg-bookmark-author\">Cloud Application Hosting for Developers | Render</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://render.com/og-img.png\" alt=\"\"></div></a></figure><p><a href=\"https://www.smashingmagazine.com/\">Smashing Magazine</a> is a popular website for web developers and designers, and it is built using the JAMstack architecture. The website uses a static site generator to build and deliver the HTML, CSS, and other static files that make up the site, and it relies on APIs to provide the backend functionality and data.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://www.smashingmagazine.com/\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Smashing Magazine — For Web Designers And Developers</div><div class=\"kg-bookmark-description\">Magazine on CSS, JavaScript, front-end, accessibility, UX and design. For developers, designers and front-end engineers.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://www.smashingmagazine.com/images/favicon/apple-touch-icon.png\" alt=\"\"><span class=\"kg-bookmark-author\">Smashing Magazine</span><span class=\"kg-bookmark-publisher\">Ruslan Yevych</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://www.smashingmagazine.com/\" alt=\"\"></div></a></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://portfolioghost.phonemall.pk/content/images/2022/12/99999996-JAM.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1000\" height=\"530\" srcset=\"https://portfolioghost.phonemall.pk/content/images/size/w600/2022/12/99999996-JAM.png 600w, https://portfolioghost.phonemall.pk/content/images/2022/12/99999996-JAM.png 1000w\" sizes=\"(min-width: 720px) 720px\"></figure><h2 id=\"conclusion-tldr\">Conclusion tl;dr:</h2><p>JAMstack is a modern web development architecture that stands for JavaScript, APIs, and Markup. It is a web development approach that focuses on using client-side JavaScript to build web applications and websites, while relying on APIs and pre-built Markup to deliver content and functionality. The main benefits of the JAMstack are faster and more secure websites and applications, easier deployment and scaling, and a more efficient and scalable development process. To implement the JAMstack, developers can use tools like static site generators, APIs, and content delivery networks (CDNs).</p>","url":"https://portfolioghost.phonemall.pk/understanding-the-jamstack-architecture-a-guide-to-building-faster-and-more-seo-performant-web-applications/","canonical_url":null,"uuid":"87679254-0fa0-4ca3-b3e8-0fd98501ee03","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"63aeb5c4bb0c2e69d864512a","reading_time":8}}]}},"pageContext":{"slug":"gridsome","pageNumber":0,"humanPageNumber":1,"skip":0,"limit":12,"numberOfPages":1,"previousPagePath":"","nextPagePath":""}},"staticQueryHashes":["1752937443","2358152166","2561578252","2731221146","4145280475"]}